module alphagrep(
input              clk,
input              reset_n,
input              in_valid,
input              in_startofpayload,
input              in_endofpayload,
input              in_ready,//output
input       [63:0] data,
input       [ 2:0] in_empty,
input              in_error,
output reg [255:0] out_data,
output reg         out_valid,
output reg [ 31:0] out_bytemask
);

reg [63:0] data_reg1;
reg [63:0] data_reg2;
reg [63:0] data_reg3;
reg [63:0] data_reg4;

always @(posedge clk) 
begin
   if (~reset_n)
   begin
     out_data  <= 256'b0;
	 out_valid <= 1'b0;
	 out_bytemask <= 32'b0;
	 data_reg1    <= 64'b0;
	 data_reg2    <= 64'b0;
	 data_reg3    <= 64'b0;
	 data_reg4    <= 64'b0;
   end
   else
   begin
      data_reg1 <= data;
	  data_reg2 <= data_reg1;
	  data_reg3 <= data_reg2;
	  data_reg4 <= data_reg3;
   end
end

always @(posedge clk) 
begin
   case (STATE):
   
   IDLE : 
         begin
         if(in_startofpayload & in_valid)
		 begin
		    STATE <= START;
			msg_cnt <= data[15:0];//lsb
			msg_size <= data[31:16];
			out_data[31:0] <= data[63:32];
		 end
		 else
		 STATE <= IDLE;
		 end
		 
	START :
           begin
		      if(in_valid & msg_cnt !='h0)
			     begin
				 if(msg_size <= 'd12)
				 begin
				    out_data[8*msg_cnt : 32] <= data[63: 64-(msg_cnt-4)*8];
					out_byte_mask[msg_size-1 :0] <= ones;
					out_valid <= 1'b1;
					STATE <= NEXT_PKTS;
					msg_cnt <= msg_cnt -1'b1;
					next_msg_size <=  data[63-(msg_cnt-4)*8 : (63-(msg_cnt-4)*8)-15];
				 end
				 else if(msg_size <= 'd20)
                 begin
				   out_data[8*msg_cnt : 32] <= {data[63: 64-(msg_cnt-12)*8], data_reg1};
				   out_byte_mask[msg_size-1 :0] <= ones;
				   out_valid <= 1'b1;
				   STATE <= NEXT_PKTS;
				   msg_cnt <= msg_cnt -1'b1;
				   next_msg_size <=  data[63-(msg_cnt-12)*8 : (63-(msg_cnt-12)*8)-15];
                 end
                 else if(msg_size <= 'd28)
                 begin
				   out_data[8*msg_cnt : 32] <= {data[63: 64-(msg_cnt-20)*8], data_reg2, data_reg1};
				   out_byte_mask[msg_size-1 :0] <= ones;
				   out_valid <= 1'b1;
				   STATE <= NEXT_PKTS;
				   msg_cnt <= msg_cnt -1'b1;
				   next_msg_size <=  data[63-(msg_cnt-20)*8 : (63-(msg_cnt-20)*8)-15];
                 end
				 else if(msg_size <= 'd32)
                 begin
				   out_data[8*msg_cnt : 32] <= {data[63: 64-(msg_cnt-28)*8],data_reg3, data_reg2, data_reg1};
				   out_byte_mask[msg_size-1 :0] <= ones;
				   out_valid <= 1'b1;
				   msg_cnt <= msg_cnt -1'b1;
				   next_msg_size <=  data[63-(msg_cnt-28)*8 : (63-(msg_cnt-20)*8)-15];
				   STATE <= NEXT_PKTS;
                 end
			end
          end		
    NEXT_PKTS :	
              begin
			    if(in_valid & msg_cnt !='h0)
			     begin 
				   if(next_msg_size <= 'd12)
				 begin
				    out_data[8*msg_cnt : 0] <= data[63: 64-(msg_cnt-4)*8];
					out_byte_mask[msg_size-1 :0] <= ones;
					out_valid <= 1'b1;
					STATE <= NEXT_PKTS;
					msg_cnt <= msg_cnt -1'b1;
				 end
				 else if(msg_size <= 'd20)
                 begin
				   out_data[8*msg_cnt : 32] <= {data[63: 64-(msg_cnt-12)*8], data_reg1};
				   out_byte_mask[msg_size-1 :0] <= ones;
				   out_valid <= 1'b1;
				   STATE <= NEXT_PKTS;
				   msg_cnt <= msg_cnt -1'b1;
                 end
                 else if(msg_size <= 'd28)
                 begin
				   out_data[8*msg_cnt : 32] <= {data[63: 64-(msg_cnt-20)*8], data_reg2, data_reg1};
				   out_byte_mask[msg_size-1 :0] <= ones;
				   out_valid <= 1'b1;
				   STATE <= NEXT_PKTS;
				   msg_cnt <= msg_cnt -1'b1;
                 end
				 else if(msg_size <= 'd32)
                 begin
				   out_data[8*msg_cnt : 32] <= {data[63: 64-(msg_cnt-28)*8],data_reg3, data_reg2, data_reg1};
				   out_byte_mask[msg_size-1 :0] <= ones;
				   out_valid <= 1'b1;
				   msg_cnt <= msg_cnt -1'b1;
				   STATE <= NEXT_PKTS;
                 end 
				 end
              end			  
end			
   